// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// -------------- //
// Pio_Parallel_2 //
// -------------- //

#define Pio_Parallel_2_wrap_target 0
#define Pio_Parallel_2_wrap 1

static const uint16_t Pio_Parallel_2_program_instructions[] = {
            //     .wrap_target
    0x6002, //  0: out    pins, 2                    
    0x6082, //  1: out    pindirs, 2                 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program Pio_Parallel_2_program = {
    .instructions = Pio_Parallel_2_program_instructions,
    .length = 2,
    .origin = -1,
};

static inline pio_sm_config Pio_Parallel_2_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + Pio_Parallel_2_wrap_target, offset + Pio_Parallel_2_wrap);
    return c;
}

static inline void  Pio_Parallel_2_init(PIO pio, uint sm, uint offset, uint pin) 
{
    // Define a structure 'c' that contains the default configuration
    pio_sm_config c = Pio_Parallel_2_program_get_default_config(offset);
    // Map the state machine's 'OUT' pin group to the starting pin for that group. this is for 1 pin but it can be for up to 32 pins	
    sm_config_set_out_pins(&c, pin, 2);
	  // Configure the OUT shifts to right, autopull after 6 bits
    sm_config_set_out_shift(&c, true, true, 4);
    // Set the pin's GPIO function (connect PIO to the pad)	Need to repeat this (with a loop) for every pin used.
    for(int p=0;p<2;p++) 
    {
        pio_gpio_init(pio, pin+p);
    }
    // Set the initial pin direction for all the pins used. Can do up to 32 sequential pins. pin is first pin, 1 is pin count, true is Output	
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, false);
    // Load our configuration to the state machine
	  pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running	
    pio_sm_set_enabled(pio, sm, true);
}

#endif

